import React, {Component} from 'react';
import { Form, FormControl, InputGroup, Row, Col, Button, Table, Card, ListGroup,  ListGroupItem } from 'react-bootstrap';
import '../css/home.css'
import logo from '../assets/cibclogo.png';
import placeholder from '../assets/placeholder.jpg';

class Home extends Component{
    // constructor(props){
    //     super(props);
    //     this.state = {

    //     }
    //     this.onChange=this.onChange.bind(this);
    //     this.onSubmit= this.onSubmit.bind(this);
    // }

    onChange(e){
        this.setState({[e.target.name]: e.target.value}); // set the state of the particular component
    }

    onSubmit(e){
        e.preventDefault();
        // if (!this.handleValidation()){ // checks if everything is filled out
        //     alert("The form is incomplete.", "Error");
        // }
        // else {
        //     const camera = {
        //         ip: this.state.ip,
        //         user: this.state.user,
        //         pass: this.state.pass,
        //         ping: this.state.ping,
        //         video: this.state.video
        //     };
        //     this.props.createCamera(camera); // adds camera to list
        //     alert("Camera saved.", "ARBSUtility");
        // }
    }

    // handleValidation(){
    //     let ip = this.state.ip;
    //     let user = this.state.user;
    //     let pass = this.state.pass;
    //     let isValid = true;

    //     if (ip=='' || user=='' || pass==''){
    //         isValid = false;
    //     }
    //     return isValid;
    // }

    render(){
        return(
            <div className="Home" id="home">
                <Row>
                    <img src={logo} className="logo" alt="Logo" />
                    <h1>Competitive Tracker</h1>
                </Row>
                <div className="mm-container"/>
                <div className="content">
                
                <Row>
                        <div className="info">
                        <h1>Tracker Home</h1>
                        <h2>CT Mandate</h2>
                        <p>The Competitive Tracker is a project that helps automate the compilation of interest rate data from various
                        competitor websites into an Excel report, and detects and potential changes in such websites since the previous execution.
                        It is a one-of-a-kind collaboration between Career Programs and Business to enable productivity savings.
                        The Competitive Tracker project team aims to build automation tools that streamline this process, bringing value that
                             translates into dollars for the bank.</p>
                        <h2>Our Products</h2>
                        </div>
                </Row>
                
                <Row className="products">
                        <Col>
                        <Card style={{ width: '40rem'}}>
                            <Card.Img variant="top" src={placeholder} className="img"/>
                            <Card.Body >
                                <Card.Title>Special Offers</Card.Title>
                                <Card.Text style={{height:'20rem'}}>
                                The Special Offers report is an Excel report generated by Selenium and Beautiful soup, based in Python tool that extracts promotional offer information from competing FIs' websites. The purpose of this product is to consolidate and report information pertaining to any special offers that CIBC's competitors offer on a given set of financial products.
                                </Card.Text>
                            </Card.Body>
                            {/* <ListGroup className="list-group-flush">
                                <ListGroupItem>etcetc</ListGroupItem>
                            </ListGroup> */}
                            <Card.Body>
                                <button className="button" type="submit">
                                    Learn More
                                </button>
                                <button className="button" type="submit">
                                    Download
                                </button>
                            </Card.Body>
                            </Card>
                        </Col>
                        <Col>
                        <Card style={{ width: '40rem' }}>
                            <Card.Img variant="top" src={placeholder} className="img"/>
                            <Card.Body>
                                <Card.Title>Rate Scanner</Card.Title>
                                <Card.Text style={{height:'20rem'}}>
                                The Rate Scanner is a user-friendly tool that allows individuals to action the basic commands of the product such as Scanning the Rates as well as Exporting the Report. The tool has many capabilities including highlighting accounts that have had a change in rate, exporting select or all reports which are automatically saved to users’ H: drives, and an execution log that identifies all accounts that were successfully scanned.
                                The first action the user will perform is clicking on the “Scan All Rates” button to run the macro for refreshing all power queries. Resultantly, the macro triggers a subroutine to refresh all power queries within each FI’s tab. As power queries are being refreshed, a progress bar is displayed on the screen, indicating that the queries have been completed. An execution log will also be displayed for the user to see, in which the outcome of a query refresh will be logged (Success or Error+message). Finally, when the refreshing is done, another subroutine will be triggered to highlight any updates in the interest rate data from the last refreshed report.
                                Following the rate scanning of the various Financial Institutions, three reports are generated in separate tabs which the individual can choose from: CAD Retail Report, Brokerage Report, and USD Report.
                                
                                </Card.Text>
                            </Card.Body>
                            {/* <ListGroup className="list-group-flush">
                                <ListGroupItem>etcetc</ListGroupItem>
                            </ListGroup> */}
                            <Card.Body>
                                <button className="button" type="submit">
                                    Learn More
                                </button>
                                <button className="button" type="submit">
                                    Download
                                </button>
                            </Card.Body>
                            </Card>
                        </Col>

                </Row>
                </div>
            </div>
        )
    }
}

export default Home;